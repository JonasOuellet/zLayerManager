[RoutineDef, zlmGetLayerPath,
    // Check if we are on pc
    [If, [ZBrushInfo, 6] == 0,
        [VarSet, outputVar, [FileNameResolvePath, "ZlmData\layers.TXT"]]
    , /* Else */
        [VarSet, outputVar, [FileNameResolvePath, "ZlmData/layers.TXT"]]
    ]
, outputVar]

[RoutineDef, zlmGetExecutable,
    // Check if we are on pc
    [If, [ZBrushInfo, 6] == 0,
        [VarSet, outputVar, [FileNameResolvePath, "ZlmData\zlm.exe"]]
    , /* Else */
        [VarSet, outputVar, [FileNameResolvePath, "ZlmData/zlm.exe"]]
    ]
, outputVar]


[RoutineDef, zlmGetLayerCount,
    [IShowActions, 0]

    //initialise output value to 0
    [VarSet, output, 0]

    //if there's a scrollbar there is more thanone layer
    [If, [IsEnabled, "Tool:Layers:Layers Scrollbar"],

	    //store current scroll bar position
		[VarSet, tmpLyScrPos, [IGetSecondary, "Tool:Layers:Layers Scrollbar"]]

		//set scroll bar to a maximum to ensure it is at the top
		[ISet, "Tool:Layers:Layers Scrollbar", 0, 256]
		[VarSet, output, [IGetSecondary, "Tool:Layers:Layers Scrollbar"] + 1]

        // restore scroll bar position
        [ISet, "Tool:Layers:Layers Scrollbar", 0, tmpLyScrPos]
	,
		[If,[IsEnabled, "Tool:Layers:Layer Intensity"],
			[VarSet,output,1]	
		]
	]
    [IShowActions, 1]
,output]


[RoutineDef, zlmSaveLayerInfo,
    [IShowActions, 0]
    [IFreeze, 

    [VarSet, layersCount, 0]
    [RoutineCall, zlmGetLayerCount, layersCount]
    [VarSet, tmpLyScrPos, [IGetSecondary, "Tool:Layers:Layers Scrollbar"]]

    [VarSet, isRecording, 0]
    [VarSet, layerNotFound, 0]
    [VarSet, recordingLayer, ""]
    [VarSet, recordingYpos, 0]
    [If, layersCount > 0, 
        [VarSet, curLayerName, [IGetTitle, "Tool:Layers:Layer Intensity"]]
        // frame current layer
        [If, [IsEnabled, Tool:Layers:SelectDown],
            [IPress, Tool:Layers:SelectDown]
        , /* else */
            [ISet, "Tool:Layers:Layers Scrollbar", 0, 0]
        ]
        [If, [IsEnabled, Tool:Layers:SelectUp],
            [IPress, Tool:Layers:SelectUp]
        ]

        [VarSet, curLayerPath, [StrMerge, "Tool:Layers:", #curLayerName]]
        [VarSet, mode, [IModGet, curLayerPath]]

        // recording
        [If, #mode == 1,
            [VarSet, isRecording, 1]
            [VarSet, layerNotFound, 1]
            // deactivate Recording
            [VarSet, wid, [IWidth,curLayerPath]]	
            [IClick, curLayerPath, wid-10, 5]
            [VarSet, recordingLayer, curLayerName]
            [VarSet, recordingYpos, [IGetSecondary, "Tool:Layers:Layers Scrollbar"]]
        ]
    ]

    [If, [MemGetSize, layerNameMem],,
        [MemCreate, layerNameMem, 1024]
    ]

    //go to top layer	
    [Loop, 100000,
        [If, [IsEnabled, Tool:Layers:SelectUp],
            [IPress, Tool:Layers:SelectUp]
		,
			[LoopExit]
		]
    ]

    [VarSet, currentSize, 0]
    [VarSet, byteOffset, 0]

    [VarSet, quote, [StrFromAsc, 34]]

    // Loop Through all layer, get the name and add to the memory
    [Loop, layersCount,
        [VarSet, curLayerName, [IGetTitle, "Tool:Layers:Layer Intensity"]]
        [VarSet, intensity, [IGet, "Tool:Layers:Layer Intensity"]]
        [VarSet, mode, [IModGet, [StrMerge, "Tool:Layers:", #curLayerName]]]

        [If, #isRecording && #layerNotFound,
            [If, ([StrLength, #recordingLayer] == [StrLength, #curLayerName]) && ([StrFind, #recordingLayer, #curLayerName] == 0),
                [VarSet, layerNotFound, 0]
                [VarSet, mode, 1]
            ]
        ]

        [VarSet, curLayerName, [StrMerge, #quote, curLayerName, #quote, " ", #intensity, " ", #mode, [StrFromAsc, 10]]]

        [VarAdd, currentSize, [StrLength, curLayerName]]

        // Check if memory is big enough
        // Resize it enough so we dont have to resize everytime
        [If, currentSize > [MemGetSize, layerNameMem],
            [MemResize, layerNameMem, (currentSize + ((layersCount - counter) * 20))]
        ,]

        // Write data to the memory
        [VarAdd, byteOffset, [MemWriteString, layerNameMem, curLayerName, byteOffset, 0]]

        [IPress, Tool:Layers:SelectDown]

    ,counter]

    // Write the name of the sub tools
    [VarSet,subtoolName,[IGetTitle,Tool:ItemInfo]]
    [VarSet,idx,[SubToolGetActiveIndex]]
    [VarSet, subtoolLine, [StrMerge, #quote, #subtoolName, #quote, " ", #idx]]

    [VarAdd, currentSize, [StrLength, subtoolLine]]

    // Check if memory is big enough
    // Resize it enough so we dont have to resize everytime
    [If, currentSize > [MemGetSize, layerNameMem],
        [MemResize, layerNameMem, currentSize]
    ,]
    [VarAdd, byteOffset, [MemWriteString, layerNameMem, subtoolLine, byteOffset, 0]]


    // Resize memory to the actual total size so we don't write any empty bits.
    [MemResize, layerNameMem, currentSize]

    [MemSaveToFile, layerNameMem, filepath, 1]

    [MemDelete, layerNameMem]

    // If was recording
    [If, #isRecording, 
        [ISet, "Tool:Layers:Layers Scrollbar", 0, recordingYpos]
        [VarSet, curLayerPath, [StrMerge, "Tool:Layers:", #recordingLayer]]
        [VarSet, wid, [IWidth,curLayerPath]]
        [IClick, curLayerPath, wid-20, 5]	
    ]

    // restore scroll bar position
    [ISet, "Tool:Layers:Layers Scrollbar", 0, tmpLyScrPos]
    
    ] // IFreeze

, filepath]


[RoutineDef, CheckSystem,	
    //check ZBrush version
    [VarSet, Zvers, [ZBrushInfo,0]]
    [If, [Val, Zvers] >= 4.8,,		
        [Note,"\Cff9923This zscript\Cffffff is not designed for this version of \Cff9923ZBrush\Cffffff.",, 3, 4737096,, 300]
        [Exit]
    ]
    //check Mac or PC
    [VarSet, isMac, [ZBrushInfo, 6]]

    // Make sure we have the dll and set its path
    [If, [ZBrushInfo, 16] == 64,//64 bit
        [If, isMac,
            //use the path below for testing only   
            //[VarSet,dllPath,"MyPluginData/ZFileUtils.lib"]	
            //use the path below for installed plugins
            [VarSet,dllPath,"ZBRUSH_ZSTARTUP/ZPlugs64/ZlmData/ZFileUtils/ZFileUtils.lib"]
        ,	
            //use the path below for testing only	
            //[VarSet,dllPath, "E:\zLayerManager\dist\ZlmData\zfileutils\ZFileUtils64.dll"]
            //use the path below for installed plugins
            [VarSet,dllPath,"ZBRUSH_ZSTARTUP\ZPlugs64\ZlmData\ZFileUtils\ZFileUtils64.dll"]		
        ]
    , //else 32 bit - no longer supported
        [Note, "\Cff9923This zscript\Cffffff is not designed for this version of \Cff9923ZBrush\Cffffff.",, 3, 4737096,, 300]
        [Exit]
    ]
    [If, [FileExists, [Var, dllPath]],
        //check that correct version
        [VarSet, dllVersion, [FileExecute, [Var, dllPath], Version]]
        [If, [Val,dllVersion] >= 3.0,//dll version
            //OK
        ,//else earlier version			
            [Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 ZFileUtils plugin \CffffffDLL\Cc0c0c0 is an earlier version which does not support this plugin.  Please install correct version."]
            [Exit]
        ]			
    , // else no DLL.
        [Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 ZFileUtils plugin \CffffffDLL\Cc0c0c0 could
        not be found at the correct location.  Please re-install the plugin, making sure the 
        relevant files and folders are in the \CffffffZStartup/ZPlugs\Cc0c0c0 folder."]
        [Exit]
    ]
    // set dll path in memory block
    [If, [MemGetSize, zlmMFileUtilPath],
        [MemResize, zlmMFileUtilPath, [StrLength, dllPath]]
    ,
        [MemCreate, zlmMFileUtilPath, [StrLength, dllPath]]
    ]
    [VarSet, size, [MemWriteString, zlmMFileUtilPath, #dllPath,0,0]]
    [MemResize, zlmMFileUtilPath, size]

]//end routine

[RoutineCall, CheckSystem]

[ISubPalette,"Zplugin:zLayerManager"]

[IButton, "Zplugin:zLayerManager:Open", "Open Layer Manager UI or update it if already opened",
    [VarSet, filePath, ""]
    [VarSet, exec, ""]
    [RoutineCall, zlmGetLayerPath, filePath]
    [RoutineCall, zlmSaveLayerInfo, filePath]
    [RoutineCall, zlmGetExecutable, exec]
    [VarSet, quote, [StrFromAsc, 34]]

    [ShellExecute, [StrMerge, "start ", #quote, #quote, " ", #quote, #exec, #quote, " -o -f ", #quote, #filePath, #quote]]
]
